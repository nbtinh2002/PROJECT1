CCS PCM C Compiler, Version 5.101, 43599               03-May-23 16:57

               Filename:   F:\PROJECT_1\Tinh_20161383_20161VMVT1_W6\PIC16F887\Code_mo_phong\test.lst

               ROM used:   223 words (3%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           12 (3%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   07F
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA D2,32
0005:  DATA EC,30
0006:  DATA 79,10
0007:  DATA E9,39
0008:  DATA A0,27
0009:  DATA CE,06
000A:  DATA 0A,00
000B:  DATA D2,32
000C:  DATA EC,30
000D:  DATA 79,10
000E:  DATA E9,39
000F:  DATA A0,27
0010:  DATA 46,23
0011:  DATA 0D,05
0012:  DATA 00,00
*
0027:  MOVF   0B,W
0028:  MOVWF  23
0029:  BCF    0B.7
002A:  BSF    03.5
002B:  BSF    03.6
002C:  BSF    0C.7
002D:  BSF    0C.0
002E:  NOP
002F:  NOP
0030:  BCF    03.5
0031:  BCF    03.6
0032:  BTFSC  23.7
0033:  BSF    0B.7
0034:  BSF    03.6
0035:  MOVF   0C,W
0036:  ANDLW  7F
0037:  BTFSC  03.2
0038:  GOTO   07D
0039:  BCF    03.6
003A:  MOVWF  23
003B:  BSF    03.6
003C:  MOVF   0D,W
003D:  BCF    03.6
003E:  MOVWF  24
003F:  BSF    03.6
0040:  MOVF   0F,W
0041:  BCF    03.6
0042:  MOVWF  25
0043:  MOVF   23,W
0044:  BTFSS  0C.4
0045:  GOTO   044
0046:  MOVWF  19
0047:  MOVF   24,W
0048:  BSF    03.6
0049:  MOVWF  0D
004A:  BCF    03.6
004B:  MOVF   25,W
004C:  BSF    03.6
004D:  MOVWF  0F
004E:  BCF    03.6
004F:  MOVF   0B,W
0050:  MOVWF  26
0051:  BCF    0B.7
0052:  BSF    03.5
0053:  BSF    03.6
0054:  BSF    0C.7
0055:  BSF    0C.0
0056:  NOP
0057:  NOP
0058:  BCF    03.5
0059:  BCF    03.6
005A:  BTFSC  26.7
005B:  BSF    0B.7
005C:  BSF    03.6
005D:  RLF    0C,W
005E:  RLF    0E,W
005F:  ANDLW  7F
0060:  BTFSC  03.2
0061:  GOTO   07D
0062:  BCF    03.6
0063:  MOVWF  23
0064:  BSF    03.6
0065:  MOVF   0D,W
0066:  BCF    03.6
0067:  MOVWF  24
0068:  BSF    03.6
0069:  MOVF   0F,W
006A:  BCF    03.6
006B:  MOVWF  25
006C:  MOVF   23,W
006D:  BTFSS  0C.4
006E:  GOTO   06D
006F:  MOVWF  19
0070:  MOVF   24,W
0071:  BSF    03.6
0072:  MOVWF  0D
0073:  BCF    03.6
0074:  MOVF   25,W
0075:  BSF    03.6
0076:  MOVWF  0F
0077:  INCF   0D,F
0078:  BTFSC  03.2
0079:  INCF   0F,F
007A:  BCF    03.6
007B:  GOTO   027
007C:  BSF    03.6
007D:  BCF    03.6
007E:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
*
0013:  MOVLW  23
0014:  MOVWF  04
0015:  BCF    03.7
0016:  MOVF   00,W
0017:  BTFSC  03.2
0018:  GOTO   026
0019:  MOVLW  02
001A:  MOVWF  78
001B:  CLRF   77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  DECFSZ 78,F
001F:  GOTO   01B
0020:  MOVLW  97
0021:  MOVWF  77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 00,F
0025:  GOTO   019
0026:  RETURN
.................... #use RS232(BAUD=9600,BITS=8,STOP=1,PARITY=N,xmit=PIN_C6,rcv=PIN_C7)
.................... #define BTN_PIN PIN_B0
.................... #define RELAY_PIN PIN_D0
.................... 
.................... void main()
*
007F:  MOVF   03,W
0080:  ANDLW  1F
0081:  MOVWF  03
0082:  MOVLW  71
0083:  BSF    03.5
0084:  MOVWF  0F
0085:  CLRF   10
0086:  MOVF   0F,W
0087:  BSF    03.6
0088:  BCF    07.3
0089:  MOVLW  0C
008A:  BCF    03.6
008B:  MOVWF  19
008C:  MOVLW  A2
008D:  MOVWF  18
008E:  MOVLW  90
008F:  BCF    03.5
0090:  MOVWF  18
0091:  CLRF   21
0092:  CLRF   20
0093:  BSF    03.5
0094:  BSF    03.6
0095:  MOVF   09,W
0096:  ANDLW  C0
0097:  MOVWF  09
0098:  BCF    03.6
0099:  BCF    1F.4
009A:  BCF    1F.5
009B:  MOVLW  00
009C:  BSF    03.6
009D:  MOVWF  08
009E:  BCF    03.5
009F:  CLRF   07
00A0:  CLRF   08
00A1:  CLRF   09
00A2:  BCF    03.7
.................... {
....................    set_tris_b(0b11111111);
00A3:  MOVLW  FF
00A4:  BSF    03.5
00A5:  BCF    03.6
00A6:  MOVWF  06
....................    set_tris_d(0b10011111);
00A7:  MOVLW  9F
00A8:  MOVWF  08
....................    set_tris_e(0b001);
00A9:  BSF    09.0
00AA:  BCF    09.1
00AB:  BCF    09.2
00AC:  BCF    09.3
....................    output_low(RELAY_PIN);
00AD:  BCF    08.0
00AE:  BCF    03.5
00AF:  BCF    08.0
.................... 
....................    int relay_state = 0;
00B0:  CLRF   22
....................    
....................    while (true)
....................    {
....................       if (input(BTN_PIN) == 0)
00B1:  BSF    03.5
00B2:  BSF    06.0
00B3:  BCF    03.5
00B4:  BTFSC  06.0
00B5:  GOTO   0DD
....................       {
....................          delay_ms(50);
00B6:  MOVLW  32
00B7:  MOVWF  23
00B8:  CALL   013
....................          output_toggle(RELAY_PIN);
00B9:  BSF    03.5
00BA:  BCF    08.0
00BB:  MOVLW  01
00BC:  BCF    03.5
00BD:  XORWF  08,F
....................          relay_state = input(RELAY_PIN);
00BE:  BSF    03.5
00BF:  BSF    08.0
00C0:  BCF    03.5
00C1:  CLRF   22
00C2:  BTFSC  08.0
00C3:  INCF   22,F
....................          if (relay_state == 1)
00C4:  DECFSZ 22,W
00C5:  GOTO   0CE
....................          {
....................             printf("Relay is ON\r\n");
00C6:  MOVLW  04
00C7:  BSF    03.6
00C8:  MOVWF  0D
00C9:  MOVLW  00
00CA:  MOVWF  0F
00CB:  BCF    03.6
00CC:  CALL   027
....................          }
00CD:  GOTO   0D5
....................          else
....................          {
....................             printf("Relay is OFF\r\n");
00CE:  MOVLW  0B
00CF:  BSF    03.6
00D0:  MOVWF  0D
00D1:  MOVLW  00
00D2:  MOVWF  0F
00D3:  BCF    03.6
00D4:  CALL   027
....................          }
.................... 
....................          while (input(BTN_PIN) == 0);
00D5:  BSF    03.5
00D6:  BSF    06.0
00D7:  BCF    03.5
00D8:  BTFSS  06.0
00D9:  GOTO   0D5
....................          delay_ms(50);
00DA:  MOVLW  32
00DB:  MOVWF  23
00DC:  CALL   013
....................       }
00DD:  GOTO   0B1
....................    }
.................... }
00DE:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
